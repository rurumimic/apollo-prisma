/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as Context from '../../context'

declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  UserWhereUniqueInput: {
    // input type
    email?: string | null // String
    id?: number | null // Int
  }
}

export interface NexusGenEnums {}

export interface NexusGenRootTypes {
  Query: {}
  User: {
    // root type
    email: string // String!
    id: number // Int!
    name?: string | null // String
  }
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  UserWhereUniqueInput: NexusGenInputs['UserWhereUniqueInput']
}

export interface NexusGenFieldTypes {
  Query: {
    // field return type
    users: NexusGenRootTypes['User'][] // [User!]!
  }
  User: {
    // field return type
    email: string // String!
    id: number // Int!
    name: string | null // String
  }
}

export interface NexusGenArgTypes {
  Query: {
    users: {
      // args
      after?: NexusGenInputs['UserWhereUniqueInput'] | null // UserWhereUniqueInput
      before?: NexusGenInputs['UserWhereUniqueInput'] | null // UserWhereUniqueInput
      first?: number | null // Int
      last?: number | null // Int
      skip?: number | null // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = 'Query' | 'User'

export type NexusGenInputNames = 'UserWhereUniqueInput'

export type NexusGenEnumNames = never

export type NexusGenInterfaceNames = never

export type NexusGenScalarNames = 'Boolean' | 'Float' | 'ID' | 'Int' | 'String'

export type NexusGenUnionNames = never

export interface NexusGenTypes {
  context: Context.Context
  inputTypes: NexusGenInputs
  rootTypes: NexusGenRootTypes
  argTypes: NexusGenArgTypes
  fieldTypes: NexusGenFieldTypes
  allTypes: NexusGenAllTypes
  inheritedFields: NexusGenInheritedFields
  objectNames: NexusGenObjectNames
  inputNames: NexusGenInputNames
  enumNames: NexusGenEnumNames
  interfaceNames: NexusGenInterfaceNames
  scalarNames: NexusGenScalarNames
  unionNames: NexusGenUnionNames
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames']
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames']
  allNamedTypes:
    | NexusGenTypes['allInputTypes']
    | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames']
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginSchemaConfig {}
}
